# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PickEau
                                 A QGIS plugin
  L'extension PickEau permet de télécharger automatiquement les chroniques
  de niveau piézométrique et de qualité des eaux souterraines mises à
  disposition par les API Hub'Eau (https://hubeau.eaufrance.fr/).
  PickEau permet ensuite de tracer les chroniques de manière interactive,
  d'afficher leurs statistiques et leurs tendances, et de partager avec
  les autres utilisateurs des commentaires sur la qualité des données.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-01-01
        git sha              : $Format:%H$
        copyright            : (C) 2019 by BRGM
        author: Laurent Vaute - l.vaute@brgm.fr
        project manager: Abel Henriot - a.henriot@brgm.fr

 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# define Python user-defined exceptions
# class Error(Exception):
#     """ Base class for other exceptions. """
#     pass

# class ErreurPackageManquant(Error):
#    """ Exception levée lorsque un package non inclu par défaut dans la distribution python de Qgis est manquant."""
#    pass

# from qgis.core import *
# from qgis.core import QgsApplication
# from qgis.utils import *

import sys
import os
import importlib

# import Qgis API
from qgis.core import QgsApplication
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QDockWidget

# import class Pickeau
from .dependances.dependances import Dependances
from .dependances.qgis_extensions import Qgis_Extensions

from .pick_utilitaire import Pick_IO, Pick_Tools
from .pick_configuration import Pick_Config
from .pick_requete import Pick_Req
from .pick_page_donnee import Pick_Pg_Data
from .pick_page_traitement import Pick_Pg_Proc
from .pick_page_graphique import Pick_Pg_Graph
from .pickeau_dockwidget import PickEauDockWidget
from .pickeau_graph_dockwidget import PickEauGraphDockWidget
from .commentaires.commentaires import Commentaires

from qgis.gui import QgsMapToolEmitPoint, QgsMapCanvas


class PickEau:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        # locale = QSettings().value('locale/userLocale')[0:2]
        # locale_path = os.path.join(
        #     self.plugin_dir,
        #     'i18n',
        #     'pickeau_{}.qm'.format(locale))

        # if os.path.exists(locale_path):
        #     self.translator = QTranslator()
        #     self.translator.load(locale_path)

        # if QVersionNumber() > '4.3.3':
        # QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u"&PickEau")

        # todo: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'PickEau')
        self.toolbar.setObjectName(u'PickEau')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PickEau', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        path = self.plugin_dir
        rel_path = "pickeau_icon.png"
        abs_path = os.path.join(path, rel_path)
        icon_path = abs_path

        self.add_action(
            icon_path,
            text=self.tr(u"PickEau"),
            callback=self.run,
            parent=self.iface.mainWindow())

    # --------------------------------------------------------------------------
    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # disconnects
        self.mainDockwidget.closingPlugin.disconnect(self.onClosePlugin)
        self.graphDockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.mainDockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # print "** UNLOAD PickEau"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u"&PickEau"),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    # --------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        # Run QGIS extension when plugin start
        extensions = Qgis_Extensions(self.plugin_dir)
        extensions_chargees = extensions.demarrer_extensions()

        self._dataplotly_charge = False

        # Verifie que DataPlotLy est charge
        if ("est_demarree" in extensions_chargees["DataPlotly"]):
            if(extensions_chargees["DataPlotly"]["est_demarree"]):
                self._dataplotly_charge = True

        if not hasattr(self, 'mainDockwidget'):
            # Create the dockwidget (after translation) and keep reference
            self.mainDockwidget = PickEauDockWidget()
            self.graphDockwidget = PickEauGraphDockWidget()

        # __________Ajouts au template______________________________________________________________________________

        #         Affiche la première page du plugin
        self.mainDockwidget.tabWidget.setCurrentIndex(0)

        # Instancie les classes non liées à l'interface de PickEau
        self.pio = Pick_IO()
        self.ptools = Pick_Tools()
        self.pconfig = Pick_Config(self.pio, self.ptools)
        self.preq = Pick_Req(self.pio, self.ptools)

        # Instancie les classes liées à l'interface de PickEau (pages du tabWidget)
        # et passe en référence l'interface Qgis (iface) sinon erreur
        # passe aussi en référence les dockwidgets associés sinon erreur lors de l'initialisation des widgets
        self.pdata = Pick_Pg_Data(self.iface,
                                  self.mainDockwidget,
                                  self.pio,
                                  self.ptools,
                                  self.pconfig,
                                  self.preq)

        self.pproc = Pick_Pg_Proc(self.iface,
                                  self.mainDockwidget,
                                  self.pio,
                                  self.ptools,
                                  self.pconfig,
                                  self.preq)

        if self._dataplotly_charge:
            self.pgraph = Pick_Pg_Graph(self.iface,
                                        self.graphDockwidget,
                                        self.pio,
                                        self.ptools,
                                        self.pconfig,
                                        self.preq)

        # Instancie les commentaires
        Commentaires(self.mainDockwidget, self.iface)

        #     __________________________________________________________________________________________________________

        # connect to provide cleanup on closing of dockwidget
        self.mainDockwidget.closingPlugin.connect(self.onClosePlugin)
        self.graphDockwidget.closingPlugin.connect(self.onClosePlugin)

        # Affichage du QdockWidget principal, situé à droite
        # TODO: fix to allow choice of dock location
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.mainDockwidget)
        self.mainDockwidget.show()

        # Affichage du QdockWidget secondaire des graphiques, situé à gauche
        if self._dataplotly_charge:
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.graphDockwidget)
            self.graphDockwidget.show()

        # Liste de tous les dockwidgets existants
        list_dockwidgets = self.iface.mainWindow().findChildren(QDockWidget)

        # Mise en onglet de tous les QdockWidget situés à droite et activation de l'onglet PickEau
        dockwidget_pickeau_area = self.iface.mainWindow().dockWidgetArea(self.mainDockwidget)
        for dwiget in list_dockwidgets:
            # print(dwiget)
            if dwiget is not self.mainDockwidget:
                if self.iface.mainWindow().dockWidgetArea(dwiget) == dockwidget_pickeau_area and dwiget.isHidden() is False:
                    self.iface.mainWindow().tabifyDockWidget(self.mainDockwidget, dwiget)
        self.mainDockwidget.raise_()

        # Astuce pour affichage correct de la partie basse cachée de la fenêtre principale
        self.iface.mainWindow().showNormal()
        self.iface.mainWindow().showMaximized()

        # Mise en onglet de tous les QdockWidget situés à gauche sauf la liste des couches
        # et activation de l'onglet des graphiques de PickEau
        dockwidget_graph_pickeau_area = self.iface.mainWindow().dockWidgetArea(self.graphDockwidget)
        for dwiget in list_dockwidgets:
            if dwiget is not self.graphDockwidget:
                if self.iface.mainWindow().dockWidgetArea(dwiget) == dockwidget_graph_pickeau_area and dwiget.isHidden() is False:
                    self.iface.mainWindow().tabifyDockWidget(self.graphDockwidget, dwiget)
        self.graphDockwidget.raise_()
